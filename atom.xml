<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeInterviews</title>
  <subtitle>Programming interview questions, tips and knowledge, system design, big data.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codeinterviews.com/"/>
  <updated>2016-07-09T19:54:31.000Z</updated>
  <id>http://codeinterviews.com/</id>
  
  <author>
    <name>CodeInterviews</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python系统性能信息模块-psutil</title>
    <link href="http://codeinterviews.com/python%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E4%BF%A1%E6%81%AF%E6%A8%A1%E5%9D%97-pstuil/"/>
    <id>http://codeinterviews.com/python系统性能信息模块-pstuil/</id>
    <published>2016-07-09T19:54:31.000Z</published>
    <updated>2016-07-09T19:54:31.000Z</updated>
    
    <content type="html">&lt;p&gt;psutil模块能够轻松获取系统能够运行的进程和系统利用率（包括CPU、内存、磁盘、网络等）信息。主要用于系统监控，分析和限制系统资源及进程的管理。&lt;/p&gt;
&lt;p&gt;它实现了很多同等命令行工具提供的功能，如ps、top、df等。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;一-psutil的安装与基本使用&quot;&gt;&lt;a href=&quot;#一-psutil的安装与基本使用&quot; class=&quot;headerlink&quot; title=&quot;一. psutil的安装与基本使用&quot;&gt;&lt;/a&gt;一. psutil的安装与基本使用&lt;/h2&gt;&lt;p&gt;楼主本人使用的系统是osx 10.11.1。使用的python版本是系统自带的2.7.10.&lt;/p&gt;
&lt;h4 id=&quot;下载软件包&quot;&gt;&lt;a href=&quot;#下载软件包&quot; class=&quot;headerlink&quot; title=&quot;下载软件包&quot;&gt;&lt;/a&gt;下载软件包&lt;/h4&gt;&lt;p&gt;psutil的下载网址为:&lt;a href=&quot;https://pypi.python.org/simple/psutil/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载网址&lt;/a&gt;。然后选择&lt;code&gt;psutil-3.2.2.tar.gz&lt;/code&gt;进行下载。&lt;/p&gt;
&lt;p&gt;具体安装步骤：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. tar -zxvf psutil-3.2.2.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. cd psutil-3.2.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. sudo python setup.py install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;psutil的基本使用&quot;&gt;&lt;a href=&quot;#psutil的基本使用&quot; class=&quot;headerlink&quot; title=&quot;psutil的基本使用&quot;&gt;&lt;/a&gt;psutil的基本使用&lt;/h4&gt;&lt;p&gt;首先需要进行模块的导入，然后就可以进行使用了，具体事例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import psutil  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print psutil.virtual_memory()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;二-系统性能信息&quot;&gt;&lt;a href=&quot;#二-系统性能信息&quot; class=&quot;headerlink&quot; title=&quot;二. 系统性能信息&quot;&gt;&lt;/a&gt;二. 系统性能信息&lt;/h2&gt;&lt;p&gt;psutil模块已经分装了系统性能信息的方法，主要分为以下几个方面：&lt;/p&gt;
&lt;h4 id=&quot;CPU&quot;&gt;&lt;a href=&quot;#CPU&quot; class=&quot;headerlink&quot; title=&quot;CPU&quot;&gt;&lt;/a&gt;CPU&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 获取CPU完整信息  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print psutil.cpu_times()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 获取单项数据信息,如user的CPU时间比  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print psutil.cpu_times().user  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 获取cpu的逻辑个数  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print psutil.cpu_count()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 获取cpu的物理个数  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print psutil.cpu_count(logical=False)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;内存&quot;&gt;&lt;a href=&quot;#内存&quot; class=&quot;headerlink&quot; title=&quot;内存&quot;&gt;&lt;/a&gt;内存&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#获取内存全部信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print psutil.virtual_memory()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#获取内存总数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print psutil.virtual_memory().total&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#获取空闲内存属&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print psutil.virtual_memory().free&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#获取SWAP分区信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print psutil.swap_memory()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;磁盘&quot;&gt;&lt;a href=&quot;#磁盘&quot; class=&quot;headerlink&quot; title=&quot;磁盘&quot;&gt;&lt;/a&gt;磁盘&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#获取磁盘的完整信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print psutil.disk_partitions()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#获取分区的使用情况&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print psutil.disk_usage(&amp;apos;/&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#获取硬盘总的IO个数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print psutil.disk_io_counters()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#获取单个分区IO个数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print psutil.disk_io_counters(perdisk=True)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;网络&quot;&gt;&lt;a href=&quot;#网络&quot; class=&quot;headerlink&quot; title=&quot;网络&quot;&gt;&lt;/a&gt;网络&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#获取网络总的IO信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print psutil.net_io_counters()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#获取每个网络接口的IO信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print psutil.net_io_counters(pernic=True)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;####其他系统信息（登陆用户，开机时间）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;获取当前登陆系统的用户信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print psutil.users()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#获取开机时间,以linux时间戳的格式返回&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import datetime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print datetime.datetime.fromtimestamp(psutil.boot_time()).strftime(&amp;quot;%Y-%m-%d %H:%M:%S&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;##三. 系统进程管理方法&lt;br&gt;获取当前系统的进程信息，可以得知程序的运行状态，包括进程的启动时间、查看或设置CPU亲和度、内存使用率、IO信息、socket链接、线程数等，通过这些信息可以很好的看出进程的状态，以便进行优化。&lt;/p&gt;
&lt;p&gt;####进程信息&lt;br&gt;获取全部进程的信息，或者根据一个进程ID得到进程的process对象，然后获取该进程的一些信息。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#获取所有进程的PID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print psutil.pids()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#实例化一个process对象,参数为一个进程PID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p=psutil.Process(1788)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print p.name() #进程名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print p.exe()  #进程路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print p.cwd() #进程工作目录绝对路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print p.status() #进程的状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print p.create_time() #进程创建的时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print p.uids() #进程uid信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print p.gids() #进程gid信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print p.cpu_times() #进程CPU时间信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print p.cpu_affinity() #进程cpu亲和度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print p.memory_percent() #进程内存利用率&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print p.memory_info() #进程内存rss,vms信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print p.io_counters() #进程IO信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print p.connections() #打开进程socket的namedutples列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print p.num_threads() #进程开启的线程数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;####Popen类的使用&lt;br&gt;psutil提供的Popen类的作用是获取用户启动的应用程序进程信息，以便跟踪程序进程的运行状态。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#通过psutil的Popen方法启动的应用程序,可以进行跟踪&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from subprocess import PIPE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p=psutil.Popen([&amp;quot;/usr/bin/python&amp;quot;,&amp;quot;-c&amp;quot;,&amp;quot;print(&amp;apos;hello&amp;apos;)&amp;quot;],stdout=PIPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print p.name()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print p.username()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print p.cpu_times()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;##四. 参考文档&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xwzpp/psutil&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;psutil的github地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pythonhosted.org/psutil/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;psutil的文档说明&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      python系统性能信息模块-psutil
    
    </summary>
    
      <category term="project" scheme="http://codeinterviews.com/categories/project/"/>
    
    
      <category term="python" scheme="http://codeinterviews.com/tags/python/"/>
    
      <category term="运维" scheme="http://codeinterviews.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>System Design Preparation</title>
    <link href="http://codeinterviews.com/System%20Design%20Preparation/"/>
    <id>http://codeinterviews.com/System Design Preparation/</id>
    <published>2016-07-09T18:49:09.000Z</published>
    <updated>2016-07-09T18:49:09.000Z</updated>
    
    <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.hackerrank.com/domains&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.hackerrank.com/domains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://oj.leetcode.com/problemset/algorithms/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://oj.leetcode.com/problemset/algorithms/&lt;/a&gt; LeetCode至少要刷三遍，付费部分的题建议花点钱看一下，舍不得孩子套不着狼&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lintcode.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lintcode.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://new.ninechapter.com/solutions/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://new.ninechapter.com/solutions/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/about/interview-corner/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.geeksforgeeks.org/about/interview-corner/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TopCoder Algorithm Tutorial: &lt;a href=&quot;http://help.topcoder.com/data-science/competing-in-algorithm-challenges/algorithm-tutorials/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://help.topcoder.com/data-science/competing-in-algorithm-challenges/algorithm-tutorials/&lt;/a&gt; 其中几何算法的教程要仔细看，Google特爱出几何题&lt;/li&gt;
&lt;li&gt;CC150: Cracking the Code Interview: &lt;a href=&quot;http://www.valleytalk.org/wp-content/uploads/2012/10/CrackCode.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.valleytalk.org/wp-content/uploads/2012/10/CrackCode.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CareerCup: &lt;a href=&quot;http://www.careercup.com/page&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.careercup.com/page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Glassdoor: &lt;a href=&quot;http://www.glassdoor.com/Interview/index.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.glassdoor.com/Interview/index.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/longyulu/article/details/9159589&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/longyulu/article/details/9159589&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are some articles about system design related topics.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to Rock a Systems Design Interview&lt;/li&gt;
&lt;li&gt;System Interview&lt;/li&gt;
&lt;li&gt;Scalability for Dummies&lt;/li&gt;
&lt;li&gt;Scalable Web Architecture and Distributed Systems&lt;/li&gt;
&lt;li&gt;Numbers Everyone Should Know&lt;/li&gt;
&lt;li&gt;Scalable System Design Patterns&lt;/li&gt;
&lt;li&gt;Introduction to Architecting Systems for Scale&lt;/li&gt;
&lt;li&gt;Transactions Across Datacenters&lt;/li&gt;
&lt;li&gt;A Plain English Introduction to CAP Theorem&lt;/li&gt;
&lt;li&gt;The CAP FAQ&lt;/li&gt;
&lt;li&gt;Paxos Made Simple&lt;/li&gt;
&lt;li&gt;Consistent Hashing&lt;/li&gt;
&lt;li&gt;NOSQL Patterns&lt;/li&gt;
&lt;li&gt;Scalability, Availability &amp;amp; Stability Patterns&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are some good references for each question. The references here are slides and articles.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design a CDN network &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;Globally Distributed Content Delivery.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design a Google document system&lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;google-mobwrite&lt;br&gt;Differential Synchronization.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design a random ID generation system  &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;Announcing Snowflake&lt;br&gt;snowflake.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design a key-value database  &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;Introduction to Redis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design the Facebook news seed function  &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;What are best practices for building something like a News Feed?&lt;br&gt;[&lt;a href=&quot;http://www.weiming.info/zhuti/JobHunting/32463885/][11&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.weiming.info/zhuti/JobHunting/32463885/][11&lt;/a&gt;]&lt;br&gt;What are the scaling issues to keep in mind while developing a social network feed?&lt;br&gt;Activity Feeds Architecture&lt;br&gt;&lt;a href=&quot;http://www.weiming.info/zhuti/JobHunting/32463885/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.weiming.info/zhuti/JobHunting/32463885/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design the Facebook timeline function   &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;Building Timeline&lt;br&gt;Facebook Timeline.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design a function to return the top k requests during past time interval   &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;Efficient Computation of Frequent and Top-k Elements in Data Streams&lt;br&gt;An Optimal Strategy for Monitoring Top-k Queries in Streaming Windows&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design an online multiplayer card game   &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;How to Create an Asynchronous Multiplayer Game&lt;br&gt;How to Create an Asynchronous Multiplayer Game Part 2: Saving the Game State to Online Database&lt;br&gt;How to Create an Asynchronous Multiplayer Game Part 3: Loading Games from the Database&lt;br&gt;How to Create an Asynchronous Multiplayer Game Part 4: Matchmaking&lt;br&gt;Real Time Multiplayer in HTML5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design a graph search function   &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;Building out the infrastructure for Graph Search&lt;br&gt;Indexing and ranking in Graph Search&lt;br&gt;The natural language interface of Graph Search and Erlang at Facebook.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design a picture sharing system  &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;Flickr Architecture&lt;br&gt;Instagram Architecture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design a search engine   &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;How would you implement Google Search?&lt;br&gt;Implementing Search Engines&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design a recommendation system   &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;Hulu’s Recommendation System&lt;br&gt;Recommender Systems&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design a tiny url system   &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;System Design for Big Data-tinyurl&lt;br&gt;URL Shortener API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design a garbage collection system   &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;Baby’s First Garbage Collector.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design a scalable web crawling system  &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;Design and Implementation of a High-Performance Distributed Web Crawler&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design the Facebook chat function   &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;Erlang at Facebook&lt;br&gt;Facebook Chat&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/piaoger/archive/2012/08/19/2646530.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/piaoger/archive/2012/08/19/2646530.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design a trending topic system   &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;Implementing Real-Time Trending Topics With a Distributed Rolling Count Algorithm in Storm&lt;br&gt;Early detection of Twitter trends explained&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design a cache system   &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;Introduction to Memcached&lt;br&gt;&lt;a href=&quot;https://www.adayinthelifeof.nl/2011/02/06/memcache-internals/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.adayinthelifeof.nl/2011/02/06/memcache-internals/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.careercup.com/question?id=16835665&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.careercup.com/question?id=16835665&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design a typeahead search/search suggestion  &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;&lt;a href=&quot;https://www.facebook.com/notes/facebook-engineering/the-life-of-a-typeahead-query/389105248919&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.facebook.com/notes/facebook-engineering/the-life-of-a-typeahead-query/389105248919&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design a system to return POI within 5 miles  &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_ae33b83901017921.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.sina.com.cn/s/blog_ae33b83901017921.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/LBSer/p/3310455.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/LBSer/p/3310455.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Copy one file to multiple servers  &lt;/strong&gt;&lt;br&gt;Reference:&lt;br&gt;&lt;a href=&quot;https://vimeo.com/11280885&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://vimeo.com/11280885&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.twitter.com/2010/murder-fast-datacenter-code-deploys-using-bittorrent&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.twitter.com/2010/murder-fast-datacenter-code-deploys-using-bittorrent&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      系统设计准备
    
    </summary>
    
      <category term="System Design" scheme="http://codeinterviews.com/categories/System-Design/"/>
    
    
      <category term="Interview" scheme="http://codeinterviews.com/tags/Interview/"/>
    
      <category term="System Design" scheme="http://codeinterviews.com/tags/System-Design/"/>
    
  </entry>
  
  <entry>
    <title>Resevior Sampling蓄水池算法java实现</title>
    <link href="http://codeinterviews.com/Resevior%20Sampling/"/>
    <id>http://codeinterviews.com/Resevior Sampling/</id>
    <published>2016-07-01T03:19:21.000Z</published>
    <updated>2016-07-01T03:19:21.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Resevior-Sampling&quot;&gt;&lt;a href=&quot;#Resevior-Sampling&quot; class=&quot;headerlink&quot; title=&quot;Resevior Sampling&quot;&gt;&lt;/a&gt;Resevior Sampling&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Randomly return the index of maximal elements in the array.&lt;br&gt;follow up: 要求linear time 和constant space&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先把前k个数放入蓄水池，对第k+1，我们以k/(k+1)概率决定是否要把它换入蓄水池，换入时随机的选取一个作为替换项，这样一直做下去，对于任意的样本空间n，对每个数的选取概率都为k/n。也就是说对每个数选取概率相等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create an array reservoir[0..k-1] and copy first k items of stream[] to it.&lt;/li&gt;
&lt;li&gt;Now one by one consider all items from (k+1)th item to nth item.&lt;/li&gt;
&lt;li&gt;Generate a random number from 0 to i where i is index of current item in stream[]. Let the generated random number is j.&lt;/li&gt;
&lt;li&gt;If j is in range 0 to k-1, replace reservoir[j] with arr[i]&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findMax&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;arr)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = arr.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ret =-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, max = INT_MIN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;len; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(arr[i]==max)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			srand(time(NULL));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; judge = rand()%count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(judge==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ret = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(max==INT_MIN || arr[i]&amp;gt;max)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			max = arr[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ret = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			count=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      Resevior Sampling 蓄水池算法java实现
    
    </summary>
    
      <category term="algorithm" scheme="http://codeinterviews.com/categories/algorithm/"/>
    
    
      <category term="Interview" scheme="http://codeinterviews.com/tags/Interview/"/>
    
      <category term="Algorithm" scheme="http://codeinterviews.com/tags/Algorithm/"/>
    
      <category term="Resevior Sampling" scheme="http://codeinterviews.com/tags/Resevior-Sampling/"/>
    
  </entry>
  
  <entry>
    <title>Top 25 Angular.js Interview Questions</title>
    <link href="http://codeinterviews.com/Top%2025%20Angular.js%20Interview%20Questions/"/>
    <id>http://codeinterviews.com/Top 25 Angular.js Interview Questions/</id>
    <published>2016-06-30T05:47:02.000Z</published>
    <updated>2016-06-30T05:47:02.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;1) What is Angular.js? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AngularJS is a javascript framework used for creating single web page applications. It allows you to use HTML as your template language and enables you to extend HTML’s syntax to express your application’s components clearly &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2) Explain what are the key features of Angular.js ? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The key features of angular.js are:&lt;br&gt;Scope&lt;br&gt;Controller&lt;br&gt;Model&lt;br&gt;View&lt;br&gt;Services&lt;br&gt;Data Binding&lt;br&gt;Directives&lt;br&gt;Filters&lt;br&gt;Testable &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3) Explain what is scope in Angular.js ? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Scope refers to the application model, it acts like glue between application controller and the view. Scopes are arranged in hierarchical structure and impersonate the DOM ( Document Object Model) structure of the application. It can watch expressions and propagate events. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;4) Explain what is services in Angular.js ? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In angular.js services are the singleton objects or functions that are used for carrying out specific tasks. It holds some business logic and these function can be called as controllers, directive, filters and so on. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;5) Explain what is Angular Expression? Explain what is key difference between angular expressions and JavaScript expressions? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like JavaScript, Angular expressions are code snippets that are usually placed in binding such as &lt;/p&gt;
&lt;p&gt;The key difference between the JavaScript expressions and Angular expressions &lt;/p&gt;
&lt;p&gt;Context : In Angular, the expressions are evaluated against a scope object, while the Javascript expressions are evaluated against the global window&lt;br&gt;Forgiving: In Angular expression evaluation is forgiving to null and undefined, while in Javascript undefined properties generates TypeError or ReferenceError&lt;br&gt;No Control Flow Statements: Loops, conditionals or exceptions cannot be used in an angular expression &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;6) With options on page load how you can initialize a select box ? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can initialize a select box with options on page load by using ng-init directive &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;7) Explain what are directives ? Mention some of the most commonly used directives in Angular.js application ? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A directive is something that introduces new syntax, they are like markers on DOM element which attaches a special behavior to it. In any Angular.js application, directives are the most important components. &lt;/p&gt;
&lt;p&gt;Some of the commonly used directives are ng-model, ng-App, ng-bind, ng-repeat , ng-show etc. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;8) Mention what are the advantages of using Angular.js ? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Angular.js has several advantages in web development. &lt;/p&gt;
&lt;p&gt;Angular.js supports MVS pattern&lt;br&gt;Can do two ways data binding using Angular.js&lt;br&gt;It has per-defined form validations&lt;br&gt;It supports both client server communication&lt;br&gt;It supports animations &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;9) Explain what Angular JS routes does ? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Angular js routes enable you to create different URLs for different content in your application. Different URLs for different content enables user to bookmark URLs to specific content. Each such bookmark able URL in Angular.js is called a route &lt;/p&gt;
&lt;p&gt;A value in Angular JS is a simple object. It can be a number, string or JavaScript object. Values are typically used as configuration injected into factories, services or controllers. A value should be belong to an Angular.js module. &lt;/p&gt;
&lt;p&gt;Injecting a value into an Angular.js controller function is done by adding a parameter with the same name as the value &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;10) Explain what is data binding in Angular.js ? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Automatic synchronization of data between the model and view components is referred as data binding in Angular.js. There are two ways for data binding &lt;/p&gt;
&lt;p&gt;Data mining in classical template systems&lt;br&gt;Data binding in angular templates &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;11) What makes angular.js better ? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Registering Callbacks: There is no need to register callbacks . This makes your code simple and easy to debug.&lt;br&gt;Control HTML DOM programmatically: All the application that are created using Angular never have to manipulate the DOM although it can be done if it is required&lt;br&gt;Transfer data to and from the UI: Angular.js helps to eliminate almost all of the boiler plate like validating the form, displaying validation errors, returning to an internal model and so on which occurs due to flow of marshaling data&lt;br&gt;No initialization code: With angular.js you can bootstrap your app easily using services, which auto-injected into your application in Guice like dependency injection style &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;12) Explain what is string interpolation in angular.js ? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In angular.js the compiler during the compilation process matches text and attributes using interpolate service to see if they contains embedded expressions. As part of normal digest cycle these expressions are updated and registered as watches. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;13) Mention the steps for the compilation process of HTML happens? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Compilation of HTML process occurs in following ways &lt;/p&gt;
&lt;p&gt;Using the standard browser API, first the HTML is parsed into DOM&lt;br&gt;By using the call to the $compile () method, compilation of the DOM is performed. The method traverses the DOM and matches the directives.&lt;br&gt;Link the template with scope by calling the linking function returned from the previous step &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;14) Explain what is directive and Mention what are the different types of Directive? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;During compilation process when specific HTML constructs are encountered a behavior or function is triggered, this function is referred as directive. It is executed when the compiler encounters it in the DOM. &lt;/p&gt;
&lt;p&gt;Different types of directives are &lt;/p&gt;
&lt;p&gt;Element directives&lt;br&gt;Attribute directives&lt;br&gt;CSS class directives&lt;br&gt;Comment directives &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;15) Explain what is linking function and type of linking function? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Link combines the directives with a scope and produce a live view. For registering DOM listeners as well as updating the DOM, link function is responsible. After the template is cloned it is executed. &lt;/p&gt;
&lt;p&gt;Pre-linking function: Pre-linking function is executed before the child elements are linked. It is not considered as the safe way for DOM transformation.&lt;br&gt;Post linking function: Post linking function is executed after the child elements are linked. It is safe to do DOM transformation by post-linking function &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;16) Explain what is injector? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;An injector is a service locator. It is used to retrieve object instances as defined by provider, instantiate types, invoke methods and load modules. There is a single injector per Angular application, it helps to look up an object instance by its name. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;17) Explain what is the difference between link and compile in angular.js? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Compile function: It is used for template DOM Manipulation and collect all of the directives.&lt;br&gt;Link function: It is used for registering DOM listeners as well as instance DOM manipulation. It is executed once the template has been cloned. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;18) Explain what is factory method in angular.js? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For creating the directive, factory method is used. It is invoked only once, when compiler matches the directive for the first time. By using $injector.invoke the factory method is invoked. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;19) Mention what are the styling form that ngModel adds to CSS classes ? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ngModel adds these CSS classes to allow styling of form as well as control &lt;/p&gt;
&lt;p&gt;ng- valid&lt;br&gt;ng- invalid&lt;br&gt;ng-pristine&lt;br&gt;ng-dirty &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;20) Mention what are the characteristics of “Scope”? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To observer model mutations scopes provide APIs ($watch)&lt;br&gt;To propagate any model changes through the system into the view from outside of the Angular realm&lt;br&gt;A scope inherits properties from its parent scope, while providing access to shared model properties, scopes can be nested to isolate application components&lt;br&gt;Scope provides context against which expressions are evaluated &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;21) Explain what is DI (Dependency Injection ) and how an object or function can get a hold of its dependencies ? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;DI or Dependency Injection is a software design pattern that deals with how code gets hold of its dependencies. In order to retrieve elements of the application which is required to be configured when module gets loaded , the operation “config” uses dependency injection. &lt;/p&gt;
&lt;p&gt;These are the ways that object uses to hold of its dependencies &lt;/p&gt;
&lt;p&gt;Typically using the new operator, dependency can be created&lt;br&gt;By referring to a global variable, dependency can be looked up&lt;br&gt;Dependency can be passed into where it is required &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;22) Mention what are the advantages of using Angular.js framework ? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Advantages of using Angular.js as framework are &lt;/p&gt;
&lt;p&gt;Supports two way data-binding&lt;br&gt;Supports MVC pattern&lt;br&gt;Support static template and angular template&lt;br&gt;Can add custom directive&lt;br&gt;Supports REST full services&lt;br&gt;Supports form validations&lt;br&gt;Support both client and server communication&lt;br&gt;Support dependency injection&lt;br&gt;Applying Animations&lt;br&gt;Event Handlers &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;23) Explain the concept of scope hierarchy? How many scope can an application have? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Each angular application consist of one root scope but may have several child scopes. As child controllers and some directives create new child scopes, application can have multiple scopes. When new scopes are formed or created they are added as a children of their parent scope. Similar to DOM, they also creates a hierarchical structure. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;24) Explain what is the difference between angular.js and backbone.js? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Angular.js combines the functionalities of most of the 3rd party libraries, it supports individual functionalities required to develop HTML5 Apps. While Backbone.js do their jobs individually. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;25) Who created Angular JS ? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Intially it was developed by Misko Hevery and Adam Abrons. Currently it is being developed by Google. &lt;/p&gt;
</content>
    
    <summary type="html">
    
      Top 25 Angular.js Interview Questions
    
    </summary>
    
      <category term="Angular.js" scheme="http://codeinterviews.com/categories/Angular-js/"/>
    
    
      <category term="javascript" scheme="http://codeinterviews.com/tags/javascript/"/>
    
      <category term="Angular.js" scheme="http://codeinterviews.com/tags/Angular-js/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS 学习资料</title>
    <link href="http://codeinterviews.com/NodeJS-Learning/"/>
    <id>http://codeinterviews.com/NodeJS-Learning/</id>
    <published>2016-06-30T05:43:35.000Z</published>
    <updated>2016-06-30T05:45:02.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;&lt;p&gt;Go to &lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nodejs.org/&lt;/a&gt;, download node.js installer and follow instructions. Mac OS, Windows, and Linux are supported. &lt;/p&gt;
&lt;h2 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h2&gt;&lt;p&gt;To use Node.js you need to have a decent understanding of JavaScript language. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codecademy.com/tracks/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Codecademy - JS&lt;/a&gt; - Good for practicing and learning syntax.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yuiblog.com/crockford/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Crockford’s videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eloquentjavascript.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Eloquent JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Essential JavaScript Design Patterns For Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.buymeasoda.com/advanced-javascript-fundamentals/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Advanced JavaScript Fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javascriptissexy.com/understand-javascript-closures-with-ease/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understand JavaScript Closures With Ease&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bonsaiden.github.com/JavaScript-Garden/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript garden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://oreilly.com/catalog/9780596806767&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript Patterns Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://oreilly.com/catalog/9780596517748/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript: The Good Parts Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/es6/promises/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript Promises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Development-Tools-IDEs&quot;&gt;&lt;a href=&quot;#Development-Tools-IDEs&quot; class=&quot;headerlink&quot; title=&quot;Development Tools/IDEs&quot;&gt;&lt;/a&gt;Development Tools/IDEs&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yeoman.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yeoman&lt;/a&gt; - Project and modules generator&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gulpjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gulp&lt;/a&gt; - Task runner/build system&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eric-xujun.github.io/sergtitov/NodeJS-Learning/blob/master&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Grunt&lt;/a&gt; - Task runner/build system&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jetbrains.com/webstorm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebStorm/PHPStorm&lt;/a&gt; - popular and extremely powerful IDE for coding web applications. Paid but you can get it for free , if you are an open-source developer (required an application approval).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejstools.codeplex.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js Tools for Visual Studio&lt;/a&gt; - see &lt;a href=&quot;http://www.hanselman.com/blog/IntroducingNodejsToolsForVisualStudio.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;blog post&lt;/a&gt; from team member Scott Hanselman.&lt;/li&gt;
&lt;li&gt;NetBeans with &lt;a href=&quot;http://plugins.netbeans.org/plugin/36653/nodejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tanepiper/SublimeText-Nodejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nodejs Sublime Text 2 Package&lt;/a&gt; - a set of code completion, scripts and tools to work with Node.js.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.microsoft.com/web/webmatrix/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebMatrix&lt;/a&gt; - is a free, lightweight, cloud-connected web development tool from Microsoft.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://krillapps.com/coderunner/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodeRunner&lt;/a&gt; - Mac only paid IDE.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.activestate.com/komodo-ide/features&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Komodo&lt;/a&gt; - full-featured IDE from ActiveState is paid but there is also lean free version &lt;a href=&quot;http://www.activestate.com/komodo-edit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Komodo Edit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://coreh.github.io/nide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nide&lt;/a&gt; - is a web-based IDE for Node.JS that can run locally or on a remote server. Available both as a command-line tool and as a standalone Mac app.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.nodeclipse.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nodeclipse &amp;amp; Enide&lt;/a&gt; - is free open-source IDE based on Eclipse.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aptana.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Aptana Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/scripted-editor/scripted&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scripted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://brackets.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Brackets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Online&quot;&gt;&lt;a href=&quot;#Online&quot; class=&quot;headerlink&quot; title=&quot;Online&quot;&gt;&lt;/a&gt;Online&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://c9.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cloud9&lt;/a&gt; - cloud-based IDE with native support for development of Node.js applications including debugging and other features. Note that you can also &lt;a href=&quot;http://www.cambus.net/setting-up-a-node-js-development-environment-with-npm-and-cloud9-ide-installed-locally/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;install it locally&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.nitrous.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nitrous.io&lt;/a&gt; - is both an IDE and environment in the cloud. Has both online and desktop versions. Paid.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://koding.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Koding&lt;/a&gt; - offers you a free bootable VM with Node. Also you can work on the same code with your friends.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codenvy.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cloud IDE (a.k.a eXo Cloud IDE, a.k.a cod envy)&lt;/a&gt; - cloud development IDE and environment with continuous integration and other features. Offers both hosted and on-premises solutions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Hosting-Providers&quot;&gt;&lt;a href=&quot;#Hosting-Providers&quot; class=&quot;headerlink&quot; title=&quot;Hosting Providers&quot;&gt;&lt;/a&gt;Hosting Providers&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.nodejitsu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nodejitsu&lt;/a&gt; - hosting, databases and private NPM. Free for Open Source.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.openshift.com/developers/node-js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenShift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/getting-started-with-nodejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Heroku&lt;/a&gt; - Dead simple to use.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://modulus.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Modulus&lt;/a&gt; -Scalable application platform (PaaS) for developers, offering Node.js hosting, MongoDB, and performance analytics in the cloud.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codio.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Codio&lt;/a&gt; - Powerful web based IDE, free for public projects&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Fundamentals&quot;&gt;&lt;a href=&quot;#Fundamentals&quot; class=&quot;headerlink&quot; title=&quot;Fundamentals&quot;&gt;&lt;/a&gt;Fundamentals&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://webapplog.com/node-js-fundamentals-a-concise-overview-of-the-main-concepts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js FUNdamentals: A Concise Overview of The Main Concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Why Node.js&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.toptal.com/nodejs/why-the-hell-would-i-use-node-js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why The Hell Would I Use Node.js? A Case-by-Case Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pettergraff.blogspot.com/2013/01/why-node.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why I use Node.js?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://webapplog.com/php-vs-node-js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PHP vs. Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Migrating to Node.js&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://engineering.groupon.com/2013/misc/i-tier-dismantling-the-monoliths/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dismantling the Monoliths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.paypal-engineering.com/2013/11/22/node-js-at-paypal/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js at PayPal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nodejs.org/api/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Official Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CommonJS Module System&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.nodejitsu.com/articles/getting-started/what-is-require&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://docs.nodejitsu.com/articles/getting-started/what-is-require&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pages.citebite.com/i9e9e4d1yxip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pages.citebite.com/i9e9e4d1yxip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nodejs.org/api/modules.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js Modules Official Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://howtonode.org/managing-module-dependencies&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Managing module dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.tutsplus.com/tutorials/using-nodes-event-module--net-35941&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Node’s Event Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://openmymind.net/2012/2/3/Node-Require-and-Exports/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understanding exports vs. module.exports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Asynchronous-Programming&quot;&gt;&lt;a href=&quot;#Asynchronous-Programming&quot; class=&quot;headerlink&quot; title=&quot;Asynchronous Programming&quot;&gt;&lt;/a&gt;Asynchronous Programming&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understanding the node.js event loop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/cacois/avoiding-callback-hell-with-asyncjs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Avoiding Callback Hell with Async.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Promises &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://howtonode.org/promises&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Asynchronous Control Flow with Promises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/async_io/javascript-promisesq-library-17206726&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Promises with Q&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/javascript-generators-preventing-callback-hell/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES6 Generators and Preventing Callback Hell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://strongloop.com/strongblog/node-js-callback-hell-promises-generators/?utm_source=nodeweekly&amp;amp;utm_medium=email&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Managing Node.js Callback Hell with Promises, Generators and Other Approaches&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Node-Package-Manager-nam&quot;&gt;&lt;a href=&quot;#Node-Package-Manager-nam&quot; class=&quot;headerlink&quot; title=&quot;Node Package Manager (nam)&quot;&gt;&lt;/a&gt;Node Package Manager (nam)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.nodejitsu.com/articles/getting-started/npm/what-is-npm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is nam?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://howtonode.org/introduction-to-npm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to npm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Explore &lt;a href=&quot;https://npmjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;registered public nam modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/coolaj86/1318304&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to publish your module to nam?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Node.js tips and tricks&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.ponyfoo.com/2013/12/14/9-quick-tips-about-npm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;9 Quick Tips About npm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.devthought.com/2012/02/17/npm-tricks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NPM tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://substack.net/task_automation_with_npm_run&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Task automation with nam run&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Private NPM approaches&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://clock.co.uk/tech-blogs/how-to-create-a-private-npmjs-repository&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to create a private npm.js repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/paypal/kappa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A hierarchical nom-registry proxy that allows to support private nam repos without replicating the entire public registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mixu/npm_lazy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A lazy local cache for npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Debugging&quot;&gt;&lt;a href=&quot;#Debugging&quot; class=&quot;headerlink&quot; title=&quot;Debugging&quot;&gt;&lt;/a&gt;Debugging&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://strongloop.com/strongblog/whats-new-nodejs-v0-12-debugging-clusters/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What’s New in Node.js v0.12: Debugging Clustered Apps with Node-Inspector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=03qGA-GJXjI&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Video: Debugging Node.js with node-inspector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/node-inspector/node-inspector&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-inspector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/joyent/node/wiki/Using-Eclipse-as-Node-Applications-Debugger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Eclipse as Node Applications Debugger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Tutorials&quot;&gt;&lt;a href=&quot;#Tutorials&quot; class=&quot;headerlink&quot; title=&quot;Tutorials&quot;&gt;&lt;/a&gt;Tutorials&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://nodeschool.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nodeschool.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.codeschool.com/courses/real-time-web-with-nodejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.codeschool.com/courses/real-time-web-with-nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cwbuecheler.com/web/tutorials/2013/node-express-mongo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The dead-simple step-by-step guide for front-end developers to getting up and running with node.js, express, jade, and mongodb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://webapplog.com/todo-app-with-express-jsnode-js-and-mongodb/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Make a RESTful todo app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://scotch.io/tutorials/javascript/easy-node-authentication-setup-and-local&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Authentication&lt;/a&gt; - Goes over local, Facebook &amp;amp; twitter authentication.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Command-line&quot;&gt;&lt;a href=&quot;#Command-line&quot; class=&quot;headerlink&quot; title=&quot;Command line&quot;&gt;&lt;/a&gt;Command line&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://javascriptplayground.com/blog/2012/08/writing-a-command-line-node-tool/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Command line tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Blog-posts-articles&quot;&gt;&lt;a href=&quot;#Blog-posts-articles&quot; class=&quot;headerlink&quot; title=&quot;Blog posts/articles&quot;&gt;&lt;/a&gt;Blog posts/articles&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.joyent.com/developers/node&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js Production Practices&lt;/a&gt; - fantastic overview of design, deployment and debugging technics from &lt;a href=&quot;http://www.joyent.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Joyent&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Videos&quot;&gt;&lt;a href=&quot;#Videos&quot; class=&quot;headerlink&quot; title=&quot;Videos&quot;&gt;&lt;/a&gt;Videos&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=jo_B4LTHi3I&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to Node.js with Ryan Dahl&lt;/a&gt; - Ryan Dahl is a Node.js creator. Must see.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=BN0JlMZCtNU&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Alex Ford: Node.js &amp;amp; Express 101&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lanyrd.com/topics/nodejs/video/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;142 conference presentation Videos&lt;/a&gt; from &lt;a href=&quot;http://lanyrd.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lanyard.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nodetuts.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js video tutorials by Pedro Teixeira&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vidinterest.com/playlist/enbeeone3/nodejs-tutorial-videos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Collection of node.js video tutorials&lt;/a&gt; at &lt;a href=&quot;http://eric-xujun.github.io/sergtitov/NodeJS-Learning/blob/master/vidinterest.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vidinterest.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vimeo.com/70603516&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js has Arrived!&lt;/a&gt; - In this video, Node.js core committer Bert Belder discusses some of the new features in Node v0.12 including Streams3, VM improvements, cluster round-robin, execSync and profiling APIs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://channel9.msdn.com/Series/Visual-Studio-Online-Monaco/Getting-started-with-nodejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting started with node.js&lt;/a&gt; at &lt;a href=&quot;http://eric-xujun.github.io/sergtitov/NodeJS-Learning/blob/master/channel9.msdn.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;channel9.msdn.com&lt;/a&gt; -&lt;a href=&quot;http://www.youtube.com/watch?v=eD2I0zAjM5g&amp;amp;list=PLw2e3dFxewkLL73aUzOP-efQnXOTtMLbY&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Basics of Express and Mongo&lt;/a&gt; -&lt;a href=&quot;http://irlnathan.github.io/sailscasts/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting Started with Sails.js&lt;/a&gt; -&lt;a href=&quot;http://www.youtube.com/watch?v=SAc0vQCC6UQ&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;History of Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Free-Courses&quot;&gt;&lt;a href=&quot;#Free-Courses&quot; class=&quot;headerlink&quot; title=&quot;Free Courses&quot;&gt;&lt;/a&gt;Free Courses&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.coursera.org/course/startup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Startup engineering by Stanford&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Paid-Courses&quot;&gt;&lt;a href=&quot;#Paid-Courses&quot; class=&quot;headerlink&quot; title=&quot;Paid Courses&quot;&gt;&lt;/a&gt;Paid Courses&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.codeschool.com/courses/real-time-web-with-nodejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Real-time Web with Node.js&lt;/a&gt; from &lt;a href=&quot;https://www.codeschool.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;codeschool.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://teamtreehouse.com/library/code-racer/getting-started-with-nodejs-and-the-npm-package-manager&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting Started with Node.js and the NPM Package Manager&lt;/a&gt; from &lt;a href=&quot;http://teamtreehouse.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Treehouse&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.lynda.com/Nodejs-tutorials/Nodejs-First-Look/101554-2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js First Look&lt;/a&gt;(beginner) and &lt;a href=&quot;http://www.lynda.com/JavaScript-tutorials/Nodejs-Essential-Training/141132-2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js Essential Training&lt;/a&gt;(advanced) at &lt;a href=&quot;http://www.lynda.com/Node-js-training-tutorials/1283-0.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lynda.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peepcode.com/products/nodejs-i&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Meet Node.js&lt;/a&gt; and &lt;a href=&quot;https://peepcode.com/products/full-stack-nodejs-i&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Full-stack Node.js&lt;/a&gt; at &lt;a href=&quot;http://eric-xujun.github.io/sergtitov/NodeJS-Learning/blob/master/peepcode.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;peepcode.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Node.js courses at Pluralsight&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pluralsight.com/training/courses/TableOfContents?courseName=meet-nodejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Meet Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pluralsight.com/training/courses/TableOfContents?courseName=node-intro&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pluralsight.com/training/courses/TableOfContents?courseName=full-stack-nodejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Full Stack Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pluralsight.com/training/courses/TableOfContents?courseName=building-angularjs-nodejs-apps-mean&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building AngularJS and Node.js Apps with the MEAN Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pluralsight.com/training/courses/TableOfContents?courseName=expressjs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Development with ExpressJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pluralsight.com/training/courses/TableOfContents?courseName=node-on-azure&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node on Windows and Azure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Free-Books&quot;&gt;&lt;a href=&quot;#Free-Books&quot; class=&quot;headerlink&quot; title=&quot;Free Books&quot;&gt;&lt;/a&gt;Free Books&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.nodebeginner.org/#about&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Node Beginner Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/maxogden/art-of-node&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Art of Node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leanpub.com/jsfun/read&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript and Node FUNdamentals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.mixu.net/node/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mixu’s Node book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.rednode.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A collection of Node.js books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://visionmedia.github.io/masteringnode/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mastering Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Paid-Books&quot;&gt;&lt;a href=&quot;#Paid-Books&quot; class=&quot;headerlink&quot; title=&quot;Paid Books&quot;&gt;&lt;/a&gt;Paid Books&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Node-js-Action-Mike-Cantelon/dp/1617290572/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1391739265&amp;amp;sr=1-1&amp;amp;keywords=%22node.js%22&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js in Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Learning-Node-js-Hands-On-Applications-JavaScript/dp/0321910575/ref=sr_1_1?ie=UTF8&amp;amp;qid=1394518585&amp;amp;sr=8-1&amp;amp;keywords=learning+node.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learning Node.js: A Hands-On Guide to Building Web Applications in JavaScript Marc Wandschneide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/JavaScript-Server-Node-js-Express-Development/dp/0956737080/ref=sr_1_20?s=books&amp;amp;ie=UTF8&amp;amp;qid=1391739340&amp;amp;sr=1-20&amp;amp;keywords=%22node.js%22&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript on the Server Using Node.js and Express&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Express-js-Guide-Comprehensive-Book/dp/1494269279/ref=sr_1_2?s=books&amp;amp;ie=UTF8&amp;amp;qid=1391740486&amp;amp;sr=1-2&amp;amp;keywords=%22node.js%22+express&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Express.js Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Node-js-Right-Way-Server-Side-JavaScript/dp/1937785734/ref=sr_1_1?ie=UTF8&amp;amp;qid=1393208626&amp;amp;sr=8-1&amp;amp;keywords=Node+js+The+Right+Way.&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node js The Right Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://learnjs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learn JS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Frameworks&quot;&gt;&lt;a href=&quot;#Frameworks&quot; class=&quot;headerlink&quot; title=&quot;Frameworks&quot;&gt;&lt;/a&gt;Frameworks&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Sinatra like:&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/senchalabs/connect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;connect&lt;/a&gt; - an extensible HTTP server framework for Node.js using “plugins” known as middleware.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://expressjs.com/guide.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;express.js&lt;/a&gt; - a Sinatra inspired Web development framework for Node.js.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/spumko/hapi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hapi&lt;/a&gt; - a rich framework for building Web applications and services.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/techpines/express.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;express.io&lt;/a&gt; = Express + Socket.io.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/koajs/koa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;koa&lt;/a&gt; - an expressive middleware for Node.js using generators.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flatiron/flatiron&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flatiron&lt;/a&gt; - framework components for Node.js and a browser.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/totaljs/framework&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;total.js&lt;/a&gt; - a Web application framework for creating rich Web sites and Web services.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MVC: &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;* [Geddy][129] - a simple, structured Web framework for Node.js.
* [Sails.js][130] - a realtime MVC Framework for Node.js.
* [Compound][131] - the compound formula is Express + Structure + Extensions.
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Full stack: &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;* [meteor.js][132] - Meteor is an ultra-simple environment for building modern Web applications. Built using Node.js, Meteor is a framework on its own. Please see an [amazing list of Meteor resources][133] for more information.
* [Derby][134] - the MVC framework making it easy to write realtime, collaborative applications that run in both Node.js and browsers.
* [SocketStream][135] - A fast, modular Node.js Web framework dedicated to building realtime single-page applications.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you would like to learn more about Node.js frameworks, please visit &lt;a href=&quot;http://nodeframework.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodeframework.com&lt;/a&gt; and &lt;a href=&quot;http://nodewebmodules.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodewebmodules.com&lt;/a&gt;. &lt;/p&gt;
&lt;h2 id=&quot;CLI-TOOLS&quot;&gt;&lt;a href=&quot;#CLI-TOOLS&quot; class=&quot;headerlink&quot; title=&quot;CLI TOOLS&quot;&gt;&lt;/a&gt;CLI TOOLS&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://remysharp.com/2014/01/20/nodemon-1-0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nodemon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;CMS&quot;&gt;&lt;a href=&quot;#CMS&quot; class=&quot;headerlink&quot; title=&quot;CMS&quot;&gt;&lt;/a&gt;CMS&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ghost.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ghost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://keystonejs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Keystone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://calip.so/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Calipso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hatchjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hatch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Static-Site-Generators&quot;&gt;&lt;a href=&quot;#Static-Site-Generators&quot; class=&quot;headerlink&quot; title=&quot;Static Site Generators&quot;&gt;&lt;/a&gt;Static Site Generators&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt; - fast, simple &amp;amp; powerful blog framework.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.metalsmith.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Metalsmith&lt;/a&gt; - extremely simple, pluggable static site generator.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://harpjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Harp&lt;/a&gt; - static web server with built-in preprocessing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://assemble.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Assemble&lt;/a&gt; - static site generator for Grunt.js, Yeoman and Node.js.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creationix/wheat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wheat&lt;/a&gt; - a blog engine for coders written in node.JS.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/laktek/punch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Punch&lt;/a&gt; - a fun and easy way to build modern websites.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flatiron/blacksmith&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Blacksmith&lt;/a&gt; - generic static site generator built using flatiron, plates, and marked.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jsantell/poet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Poet&lt;/a&gt; - a node.js blog engine.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;See extensive collection of Static Site Generators including other languages at &lt;a href=&quot;http://www.staticgen.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.staticgen.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Libraries&quot;&gt;&lt;a href=&quot;#Libraries&quot; class=&quot;headerlink&quot; title=&quot;Libraries&quot;&gt;&lt;/a&gt;Libraries&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LearnBoost/socket.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;socket.io&lt;/a&gt; - a realtime application framework for Node.JS, with HTML5 WebSockets and cross-browser fallbacks support.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LearnBoost/mongoose&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mongoose&lt;/a&gt; - MongoDB object modeling designed to work in an asynchronous environment.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/flatiron/winston&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;winston&lt;/a&gt; - a multi-transport asynchronous logging library for Node.js&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredhanson/passport&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;passport&lt;/a&gt; - simple, unobtrusive authentication for Node.js.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/caolan/async&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;async&lt;/a&gt; - asynchronous utilities for Node and the browser.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kriskowal/q&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Q&lt;/a&gt; - a tool for making and composing asynchronous promises in JavaScript.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/visionmedia/co&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;co&lt;/a&gt; - the ultimate generator based flow-control goodness for nodes;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/visionmedia/jade&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jade&lt;/a&gt; - Jade - a robust, elegant, feature-rich template engine for Node.js.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/visionmedia/ejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ejs&lt;/a&gt; - embedded JavaScript templates for Node.js.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lodash/lodash&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lodash&lt;/a&gt; - a utility library delivering consistency, customization, performance, and extras.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mikeal/request&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;request&lt;/a&gt; - a simplified HTTP request client.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lorenwest/node-config&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;config&lt;/a&gt; - a runtime configuration for Node.js. modules.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://passportjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Passport&lt;/a&gt; - simple, unobtrusive authentication for Node.js that supports OpenID and OAuth.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Testing&quot;&gt;&lt;a href=&quot;#Testing&quot; class=&quot;headerlink&quot; title=&quot;Testing&quot;&gt;&lt;/a&gt;Testing&lt;/h2&gt;&lt;p&gt;Read about various approaches to testing Node.js code: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://code.tutsplus.com/tutorials/testing-in-nodejs--net-35018&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Testing in Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/mlilley/testing-node-js-with-mocha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Testing NodeJS with Mocha, Should, Sinon, and JSCoverage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.seejohncode.com/2012/03/13/setting-up-mocha-jscoverage/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Setting up Mocha and JSCoverage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.scotchmedia.com/tutorials/express/authentication/2/02&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Acceptance testing with supertest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codeship.io/2013/08/20/testing-tuesday-19-how-to-test-node-js-applications-with-jasmine.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Testing node.js applications with Jasmine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://howtonode.org/mocking-private-dependencies-using-rewire&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mocking Dependencies using [rewire]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some popular testing frameworks: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/visionmedia/mocha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mocha&lt;/a&gt; - a simple, flexible JavaScript test framework for Node.js and a browser. (BDD, TDD, QUnit styles via interfaces).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mhevery/jasmine-node&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jasmin-node&lt;/a&gt; - integration of the Jasmine Spec framework with Node.js.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cjohansen/Sinon.JS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sinon&lt;/a&gt; - test spies, stubs, and mocks for JavaScript.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chaijs/chai&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chai&lt;/a&gt; - a BDD / TDD assertion framework for Node.js and a browser.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/visionmedia/supertest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;supertest&lt;/a&gt; - a super-agent driven library for testing Node.js HTTP servers using a fluent API.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jhnns/rewire&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rewire&lt;/a&gt; - a dependency injection for Node.js applications.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/visionmedia/node-jscoverage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-jscoverage&lt;/a&gt; - JSCoverage for Node.js.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;What-To-Read&quot;&gt;&lt;a href=&quot;#What-To-Read&quot; class=&quot;headerlink&quot; title=&quot;What To Read&quot;&gt;&lt;/a&gt;What To Read&lt;/h3&gt;&lt;h3 id=&quot;Communities-Groups&quot;&gt;&lt;a href=&quot;#Communities-Groups&quot; class=&quot;headerlink&quot; title=&quot;Communities/Groups&quot;&gt;&lt;/a&gt;Communities/Groups&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://groups.google.com/forum/#!forum/nodejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Node.js Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://plus.google.com/communities/115365528781941125390&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google+ Node.js Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cnodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CNode&lt;/a&gt; - Node.js professional Chinese community&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.reddit.com/r/node/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js on Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/node.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stackoverflow Node.js tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.nodejsforums.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NodeJsForums.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IRC - For real-time chat about Node development go to &lt;a href=&quot;http://eric-xujun.github.io/sergtitov/NodeJS-Learning/blob/master/irc.freenode.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;irc.freenode.net&lt;/a&gt; in the &lt;strong&gt;#node.js&lt;/strong&gt; channel with an &lt;a href=&quot;http://colloquy.info/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IRC client&lt;/a&gt; or connect in your web browser to the channel using &lt;a href=&quot;http://webchat.freenode.net/?channels=node.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;freenode’s WebChat&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Blogs-News&quot;&gt;&lt;a href=&quot;#Blogs-News&quot; class=&quot;headerlink&quot; title=&quot;Blogs/News&quot;&gt;&lt;/a&gt;Blogs/News&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://howtonode.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“How To Node” blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nodeweekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js Weekly&lt;/a&gt; - an email list that gathers up the latest events and news from around the Node.js community.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nodeup.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NodeUp&lt;/a&gt; - a podcast covering the latest Node news in the community.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Who-to-Follow&quot;&gt;&lt;a href=&quot;#Who-to-Follow&quot; class=&quot;headerlink&quot; title=&quot;Who to Follow&quot;&gt;&lt;/a&gt;Who to Follow&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/visionmedia&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TJ Holowachuk&lt;/a&gt; - express, Jade, Mocha, Stylus&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/isaacs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Isaac Z. Schlueter&lt;/a&gt; - maintainer of Node.js / NPM&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mikeal&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mikeal Rogers&lt;/a&gt; - Request&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/substack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;James Haliday “substack”&lt;/a&gt; - Browserify, dnode, Optimist&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/guille&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Guillermo Rauch&lt;/a&gt; - Socket.IO&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Node-mavens&quot;&gt;&lt;a href=&quot;#Node-mavens&quot; class=&quot;headerlink&quot; title=&quot;Node mavens&quot;&gt;&lt;/a&gt;Node mavens&lt;/h3&gt;&lt;p&gt;You can find the most famous Node.js developer at &lt;a href=&quot;http://nodemavens.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nodemavens&lt;/a&gt;. &lt;/p&gt;
&lt;h2 id=&quot;Resource&quot;&gt;&lt;a href=&quot;#Resource&quot; class=&quot;headerlink&quot; title=&quot;Resource&quot;&gt;&lt;/a&gt;Resource&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yuan.rednode.cn/resource&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rednode garden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nodecloud.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nodecloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      NodeJS 学习资料汇总
    
    </summary>
    
      <category term="node.js" scheme="http://codeinterviews.com/categories/node-js/"/>
    
    
      <category term="javascript" scheme="http://codeinterviews.com/tags/javascript/"/>
    
      <category term="node.js" scheme="http://codeinterviews.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-Rotate List</title>
    <link href="http://codeinterviews.com/Rotate-List/"/>
    <id>http://codeinterviews.com/Rotate-List/</id>
    <published>2016-06-30T03:57:53.000Z</published>
    <updated>2016-06-30T03:57:53.000Z</updated>
    
    <content type="html">&lt;p&gt;##题目&lt;/p&gt;
&lt;p&gt;####Rotate List&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a list, rotate the list to the right by k places, where k is non-negative.&lt;/p&gt;
&lt;p&gt;For example:&lt;br&gt;Given &lt;code&gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL&lt;/code&gt; and &lt;code&gt;k = 2&lt;/code&gt;,&lt;br&gt;return &lt;code&gt;4-&amp;gt;5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##解题思路&lt;br&gt;这是一道链表操作的题目，基本思路是设置两个指针&lt;code&gt;i&lt;/code&gt;,&lt;code&gt;j&lt;/code&gt;,中间相差&lt;code&gt;n&lt;/code&gt;,用walker-runner定位到要旋转的那个结点，然后将下一个结点设为新表头，并且把当前结点设为表尾。设置前后两个指针，然后推进前进的方法称为&lt;strong&gt;尺取法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;但是这里需要注意的是&lt;code&gt;n&lt;/code&gt;超过链表长度，此时步数应该重新跑到结尾点计算，即&lt;code&gt;j&lt;/code&gt;指针从新回到头结点处。&lt;/p&gt;
&lt;p&gt;##算法代码&lt;br&gt;代码采用JAVA实现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Definition for singly-linked list.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * public class ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     ListNode next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     ListNode(int x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *         val = x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *         next = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ListNode &lt;span class=&quot;title&quot;&gt;rotateRight&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ListNode head, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(head==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || head.next==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ListNode i=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//定义两个指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ListNode j=head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;k&amp;lt;n;k++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	j=j.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(j==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)   &lt;span class=&quot;comment&quot;&gt;//n的长度超过链表，j重新回到头结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		j=head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        i=head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(j.next!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	j=j.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	i=i.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        j.next=head;  &lt;span class=&quot;comment&quot;&gt;//进行旋转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        head=i.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        i.next=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Rotate List
    
    </summary>
    
      <category term="algorithm" scheme="http://codeinterviews.com/categories/algorithm/"/>
    
    
      <category term="leetcode" scheme="http://codeinterviews.com/tags/leetcode/"/>
    
      <category term="Two Pointers" scheme="http://codeinterviews.com/tags/Two-Pointers/"/>
    
      <category term="Linked List" scheme="http://codeinterviews.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-Best Time to Buy and Sell Stock II</title>
    <link href="http://codeinterviews.com/Best-Time-to-Buy-and-Sell-Stock-II/"/>
    <id>http://codeinterviews.com/Best-Time-to-Buy-and-Sell-Stock-II/</id>
    <published>2016-06-30T03:57:53.000Z</published>
    <updated>2016-06-30T03:57:53.000Z</updated>
    
    <content type="html">&lt;p&gt;##题目&lt;/p&gt;
&lt;p&gt;####Best Time to Buy and Sell Stock II&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Say you have an array for which the ith element is the price of a given stock on day i.&lt;/p&gt;
&lt;p&gt;Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##解题思路&lt;br&gt;这道题跟&lt;a href=&quot;http://pisxw.com/algorithm/Best-Time-to-Buy-and-Sell-Stock.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Best Time to Buy and Sell Stock&lt;/a&gt;类似，求最大利润。区别是这里可以交易无限多次（当然我们知道交易不会超过n-1次，也就是每天都进行先卖然后买）。既然交易次数没有限定，可以看出我们只要对于每次两天差价大于0的都进行交易，就可以得到最大利润。因此算法其实就是累加所有大于0的差价既可以了，非常简单。如此只需要一次扫描就可以了&lt;/p&gt;
&lt;p&gt;##算法代码&lt;br&gt;代码采用JAVA实现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxProfit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] prices)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//该题由于可以无限次数的买入卖出，所以最大利润应该就是相邻两天差价不为0的利润之和&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(prices==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;prices.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; degit=prices[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]-prices[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(degit&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		res+=degit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Best Time to Buy and Sell Stock II
    
    </summary>
    
      <category term="algorithm" scheme="http://codeinterviews.com/categories/algorithm/"/>
    
    
      <category term="leetcode" scheme="http://codeinterviews.com/tags/leetcode/"/>
    
      <category term="Array" scheme="http://codeinterviews.com/tags/Array/"/>
    
      <category term="Greedy" scheme="http://codeinterviews.com/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-Best Time to Buy and Sell Stock IV</title>
    <link href="http://codeinterviews.com/Best-Time-to-Buy-and-Sell-Stock-IV/"/>
    <id>http://codeinterviews.com/Best-Time-to-Buy-and-Sell-Stock-IV/</id>
    <published>2016-06-30T03:57:53.000Z</published>
    <updated>2016-06-30T03:57:53.000Z</updated>
    
    <content type="html">&lt;p&gt;##题目&lt;/p&gt;
&lt;p&gt;####Best Time to Buy and Sell Stock IV&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Say you have an array for which the ith element is the price of a given stock on day i.&lt;/p&gt;
&lt;p&gt;Design an algorithm to find the maximum profit. You may complete at most k transactions.&lt;/p&gt;
&lt;p&gt;####Note:&lt;br&gt;You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).&lt;/p&gt;
&lt;p&gt;####Credits:&lt;br&gt;Special thanks to @Freezen for adding this problem and creating all test cases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##解题思路&lt;br&gt;这道题与&lt;a href=&quot;http://pisxw.com/algorithm/Best-Time-to-Buy-and-Sell-Stock-III.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Best Time to Buy and Sell Stock III&lt;/a&gt;思路是一样的。这里同样采用动态规划进行求解，仍然使用局部最优和全局最优解法由于要考虑交易次数，因此维护量应该就是一个二维数组。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;定义维护量：
global[i][j]:表示从第1天到第i天，最多交易j次的最好的利润
local[i][j]:当前到达第i天，最多可进行j次交易，并且最后一次交易在当天卖出的最好的利润是多少
定义递推式：
global[i][j]=max(global[i-1][j],local[i][j]);即第i天没有交易，和第i天有交易
local[i][j]=max(global[i-1][j-1]+max(diff,0),local[i-1][j]+diff)  diff=price[i]-price[i-1];
就是看两个量，第一个是全局到i-1天进行j-1次交易，然后加上今天的交易，如果今天是赚钱的话（也就是前面只要j-1次交易，最后一次交易取当前天），第二个量则是取local第i-1天j次交易，然后加上今天的差值（这里因为local[i-1][j]比如包含第i-1天卖出的交易，所以现在变成第i天卖出，并不会增加交易次数，而且这里无论diff是不是大于0都一定要加上，因为否则就不满足local[i][j]必须在最后一天卖出的条件了）。
需要注意的是：第i天卖出的交易数是算在前i-1天买入的那次交易中的。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要注意的事，test case中，有一个非常大的k值，直接会让内存分配失败。&lt;/p&gt;
&lt;p&gt;如何处理该种情况呢。 当k值超过prices值的个数时，此时，可以把问题转换为交易数次不限的情况。即&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pisxw.com/algorithm/Best-Time-to-Buy-and-Sell-Stock-II.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Best Time to Buy and Sell Stock II&lt;/a&gt;中的解法。&lt;/p&gt;
&lt;p&gt;##算法代码&lt;br&gt;代码采用JAVA实现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxProfit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] prices)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(prices==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || prices.length==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       		    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(k&amp;gt;prices.length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(prices==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;prices.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; degit=prices[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]-prices[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(degit&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		                res+=degit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	       定义维护量：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	       global[i][j]:表示从第1天到第i天，最多交易j次的最大利润&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	       local[i][j]:表示第i天交易，最多交易次数为j次的最大利润，且最后一次肯定是在第i天卖出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	       定义递推式：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	       global[i][j]=max(global[i-1][j],local[i][j]);即第i天没有交易，和第i天有交易&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	       local[i][j]=max(global[i-1][j-1]+max(diff,0),local[i-1][j]+diff)  diff=price[i]-price[i-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] global=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[prices.length][k+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] local=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[prices.length][k+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;prices.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; diff=prices[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]-prices[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&amp;lt;=k-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                local[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]=Math.max(global[i][j]+Math.max(diff,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;),local[i][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]+diff);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                global[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]=Math.max(global[i][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],local[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; global[prices.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][k];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Best Time to Buy and Sell Stock IV
    
    </summary>
    
      <category term="algorithm" scheme="http://codeinterviews.com/categories/algorithm/"/>
    
    
      <category term="leetcode" scheme="http://codeinterviews.com/tags/leetcode/"/>
    
      <category term="Dynamic Programming" scheme="http://codeinterviews.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-Anagrams</title>
    <link href="http://codeinterviews.com/Anagrams/"/>
    <id>http://codeinterviews.com/Anagrams/</id>
    <published>2016-06-30T03:57:53.000Z</published>
    <updated>2016-06-30T03:57:53.000Z</updated>
    
    <content type="html">&lt;p&gt;##题目&lt;/p&gt;
&lt;p&gt;####Anagrams&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an array of strings, return all groups of strings that are anagrams.&lt;/p&gt;
&lt;p&gt;Note: All inputs will be in lower-case.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##解题思路&lt;br&gt;Anagrams为易位构词，其实也很好理解，就是两个单词所包含的字符和数量都是一样的，只是顺序不同。&lt;/p&gt;
&lt;p&gt;判断两个单词是不是anagram，一般来说有两种方法。&lt;br&gt;第一种方法是用hashmap，key是字符，value是出现的次数，如果两个单词构成的hashmap相同，那么就是anagram。实现起来就是用一个构建hashmap，然后另一个在前面的hashmap中逐个去除，最后如果hashmap为空，即返回true。这个方法时间复杂度是O(m+n)，m，n分别是两个单词的长度。而空间复杂度是O(字符集的大小)。&lt;br&gt;第二种方法是将两个单词排序，如果排序之后结果相同，就说明两个单词是anagram。这种方法的时间复杂度取决于排序算法，一般排序算法是O(nlogn)，如果字符集够小，也可以用线性的排序算法。不过总体来说，如果是判断两个单词的，第一种方法要直接简单一些。&lt;/p&gt;
&lt;p&gt;这道题，是在很多字符串里面按照anagram分类，如果用hashmap的方法，然后两两匹配，在分组会比较麻烦。而如果用排序的方法则有一个很大的优势，就是排序后的字符串可以作为一个key，也就是某一个class的id，如此只要对每一个字符串排序，然后建立一个hashmap，key是排序后的串，而value是所有属于这个key类的字符串，这样就可以比较简单的进行分类。&lt;/p&gt;
&lt;p&gt;##算法代码&lt;br&gt;代码采用JAVA实现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ArrayList&amp;lt;String&amp;gt; &lt;span class=&quot;title&quot;&gt;anagrams&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] strs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ArrayList&amp;lt;String&amp;gt; res=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(strs==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || strs.length==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        HashMap&amp;lt;String,ArrayList&amp;lt;String&amp;gt;&amp;gt; map=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String,ArrayList&amp;lt;String&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;strs.length;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[] st=strs[i].toCharArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	Arrays.sort(st);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	String sts=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(st);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(map.containsKey(sts))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		ArrayList&amp;lt;String&amp;gt; alist=map.get(sts);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		alist.add(strs[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		map.put(sts,alist);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		ArrayList&amp;lt;String&amp;gt; alist=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		alist.add(strs[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		map.put(sts,alist);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Iterator iter=map.values().iterator();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(iter.hasNext())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	ArrayList&amp;lt;String&amp;gt; item=(ArrayList&amp;lt;String&amp;gt;)iter.next();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(item.size()&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		res.addAll(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Anagrams
    
    </summary>
    
      <category term="algorithm" scheme="http://codeinterviews.com/categories/algorithm/"/>
    
    
      <category term="leetcode" scheme="http://codeinterviews.com/tags/leetcode/"/>
    
      <category term="Hash Table" scheme="http://codeinterviews.com/tags/Hash-Table/"/>
    
      <category term="String" scheme="http://codeinterviews.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-Balanced Binary Tree</title>
    <link href="http://codeinterviews.com/Balanced-Binary-Tree/"/>
    <id>http://codeinterviews.com/Balanced-Binary-Tree/</id>
    <published>2016-06-30T03:57:53.000Z</published>
    <updated>2016-06-30T03:57:53.000Z</updated>
    
    <content type="html">&lt;p&gt;##题目&lt;/p&gt;
&lt;p&gt;####Balanced Binary Tree&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a binary tree, determine if it is height-balanced.&lt;/p&gt;
&lt;p&gt;For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##解题思路&lt;br&gt;该题是判断一个二叉树是否是平衡二叉树，平衡二叉树满足对树中的每一个节点，其左右子树的高度差都不大于1。因此，这里可以使用&lt;strong&gt;递归&lt;/strong&gt;的方法进行判断。&lt;/p&gt;
&lt;p&gt;一个二叉树是否是一个平衡二叉树的判断条件是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 左子树为平衡二叉树
2. 右子树为平衡二叉树
3. 左右子树的高度只差不大于1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里面需要一个子方法求取每个树的高度，然而这个方法也可以使用递归方法求解。&lt;/p&gt;
&lt;p&gt;##算法代码&lt;br&gt;代码采用JAVA实现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Definition for binary tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * public class TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode(int x) &amp;#123; val = x; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isBalanced&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; helper(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//递归判断是否为平衡二叉树&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; leftheight=getHeight(root.left);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rightheight=getHeight(root.right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;comment&quot;&gt;/*平衡二叉树需要满足三个条件：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		*1.左子树为平衡二叉树&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		*2.右子树为平衡二叉树&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		*3.左右子树的高度只差不大于1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; helper(root.left)&amp;amp;&amp;amp;helper(root.right)&amp;amp;&amp;amp;Math.abs(leftheight-rightheight)&amp;lt;=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//获取二叉树的高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getHeight&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Math.max(getHeight(root.left),getHeight(root.right))+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Balanced Binary Tree
    
    </summary>
    
      <category term="algorithm" scheme="http://codeinterviews.com/categories/algorithm/"/>
    
    
      <category term="leetcode" scheme="http://codeinterviews.com/tags/leetcode/"/>
    
      <category term="Depth-first Search" scheme="http://codeinterviews.com/tags/Depth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-Best Time to Buy and Sell Stock III</title>
    <link href="http://codeinterviews.com/Best-Time-to-Buy-and-Sell-Stock-III/"/>
    <id>http://codeinterviews.com/Best-Time-to-Buy-and-Sell-Stock-III/</id>
    <published>2016-06-30T03:57:53.000Z</published>
    <updated>2016-06-30T03:57:53.000Z</updated>
    
    <content type="html">&lt;p&gt;##题目&lt;/p&gt;
&lt;p&gt;####Best Time to Buy and Sell Stock III&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Say you have an array for which the ith element is the price of a given stock on day i.&lt;/p&gt;
&lt;p&gt;Design an algorithm to find the maximum profit. You may complete at most two transactions.&lt;/p&gt;
&lt;p&gt;####Note:&lt;br&gt;You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##解题思路&lt;br&gt;这道题是[Best Time to Buy and Sell Stock][1]的扩展，这里要求只能进行两次交易，然而这里可以扩展为K次交易，应该思路是一样的，只是&lt;code&gt;k=2&lt;/code&gt;而已。这里同样采用动态规划进行求解，仍然使用&lt;strong&gt;局部最优和全局最优解法&lt;/strong&gt;由于要考虑交易次数，因此维护量应该就是一个二维数组。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;定义维护量：
global[i][j]:表示从第1天到第i天，最多交易j次的最好的利润
local[i][j]:当前到达第i天，最多可进行j次交易，并且最后一次交易在当天卖出的最好的利润是多少
定义递推式：
global[i][j]=max(global[i-1][j],local[i][j]);即第i天没有交易，和第i天有交易
local[i][j]=max(global[i-1][j-1]+max(diff,0),local[i-1][j]+diff)  diff=price[i]-price[i-1];
就是看两个量，第一个是全局到i-1天进行j-1次交易，然后加上今天的交易，如果今天是赚钱的话（也就是前面只要j-1次交易，最后一次交易取当前天），第二个量则是取local第i-1天j次交易，然后加上今天的差值（这里因为local[i-1][j]比如包含第i-1天卖出的交易，所以现在变成第i天卖出，并不会增加交易次数，而且这里无论diff是不是大于0都一定要加上，因为否则就不满足local[i][j]必须在最后一天卖出的条件了）。
需要注意的是：第i天卖出的交易数是算在前i-1天买入的那次交易中的。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##算法代码&lt;br&gt;代码采用JAVA实现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxProfit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] prices)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(prices==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || prices.length==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		定义维护量：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		global[i][j]:表示从第1天到第i天，最多交易j次的最大利润&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		local[i][j]:表示第i天交易，最多交易次数为j次的最大利润，且最后一次肯定是在第i天卖出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		定义递推式：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		global[i][j]=max(global[i-1][j],local[i][j]);即第i天没有交易，和第i天有交易&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		local[i][j]=max(global[i-1][j-1]+max(diff,0),local[i-1][j]+diff)  diff=price[i]-price[i-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] global=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[prices.length][&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] local=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[prices.length][&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;prices.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; diff=prices[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]-prices[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&amp;lt;=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				local[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]=Math.max(global[i][j]+Math.max(diff,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;),local[i][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]+diff);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				global[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]=Math.max(global[i][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],local[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; global[prices.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Best Time to Buy and Sell Stock III
    
    </summary>
    
      <category term="algorithm" scheme="http://codeinterviews.com/categories/algorithm/"/>
    
    
      <category term="leetcode" scheme="http://codeinterviews.com/tags/leetcode/"/>
    
      <category term="Array" scheme="http://codeinterviews.com/tags/Array/"/>
    
      <category term="Dynamic Programming" scheme="http://codeinterviews.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-Best Time to Buy and Sell Stock</title>
    <link href="http://codeinterviews.com/Best-Time-to-Buy-and-Sell-Stock/"/>
    <id>http://codeinterviews.com/Best-Time-to-Buy-and-Sell-Stock/</id>
    <published>2016-06-30T03:57:53.000Z</published>
    <updated>2016-06-30T03:57:53.000Z</updated>
    
    <content type="html">&lt;p&gt;##题目&lt;/p&gt;
&lt;p&gt;####Best Time to Buy and Sell Stock&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Say you have an array for which the ith element is the price of a given stock on day i.&lt;/p&gt;
&lt;p&gt;If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##解题思路&lt;br&gt;这道题求进行一次交易能得到的最大利润。如果用&lt;code&gt;brute force&lt;/code&gt;的解法就是对每组交易都看一下利润，取其中最大的，总用有n*(n-1)/2个可能交易，所以复杂度是O(n^2)。&lt;br&gt;很容易感觉出来这是动态规划的题目,用“局部最优和全局最优解法”。思路是维护两个变量，一个是到目前为止最好的交易，另一个是在当前一天卖出的最佳交易（也就是局部最优）。递推式是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;local[i]:表示在第i天卖出的最佳交易
global[i]:表示从第1天开始到第i天的最好交易
local[i+1]=max(local[i]+prices[i+1]-price[i],0)
global[i+1]=max(local[i+1],global[i])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样一次扫描就可以得到结果，时间复杂度是O(n)。&lt;/p&gt;
&lt;p&gt;##算法代码&lt;br&gt;代码采用JAVA实现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxProfit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] prices)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(prices==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//定义局部最优维护量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; local=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//定义全局最优维护量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; global=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;prices.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	local=Math.max(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,local+prices[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]-prices[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	global=Math.max(global,local);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; global;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Best Time to Buy and Sell Stock
    
    </summary>
    
      <category term="algorithm" scheme="http://codeinterviews.com/categories/algorithm/"/>
    
    
      <category term="leetcode" scheme="http://codeinterviews.com/tags/leetcode/"/>
    
      <category term="Array" scheme="http://codeinterviews.com/tags/Array/"/>
    
      <category term="Dynamic Programming" scheme="http://codeinterviews.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-Binary Search Tree Iterator</title>
    <link href="http://codeinterviews.com/Binary-Search-Tree-Iterator%20/"/>
    <id>http://codeinterviews.com/Binary-Search-Tree-Iterator /</id>
    <published>2016-06-30T03:57:53.000Z</published>
    <updated>2016-06-30T03:57:53.000Z</updated>
    
    <content type="html">&lt;p&gt;##题目&lt;/p&gt;
&lt;p&gt;####Binary Search Tree Iterator&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.&lt;/p&gt;
&lt;p&gt;Calling next() will return the next smallest number in the BST.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.&lt;/p&gt;
&lt;p&gt;####Credits:&lt;br&gt;Special thanks to @ts for adding this problem and creating all test cases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##解题思路&lt;br&gt;就是找到以这个 root 为 根节点的最小的 值。 用一个 stack 作为buffer 来存储， 先存入 左边节点， 当输出以后， 再向右节点移动一个， 然后再存储 进去所有左节点， 和 &lt;a href=&quot;http://pisxw.com/algorithm/Binary-Tree-Postorder-Traversal.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;inorder 遍历 的非递归解法&lt;/a&gt;一样。&lt;/p&gt;
&lt;p&gt;易错点： 要检查 node.right ！＝ null， 才能向右移动， 否则就不用管， 意思就是向上移动一个。&lt;/p&gt;
&lt;p&gt;##算法代码&lt;br&gt;代码采用JAVA实现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Definition for binary tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * public class TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode(int x) &amp;#123; val = x; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BSTIterator&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	LinkedList&amp;lt;TreeNode&amp;gt; stack=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;TreeNode&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BSTIterator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(root!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	stack.push(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	root=root.left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; whether we have a next smallest number */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !stack.isEmpty();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; the next smallest number */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TreeNode cur=stack.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res=cur.val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(cur.right!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	cur=cur.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(cur!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		stack.push(cur);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		cur=cur.left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Your BSTIterator will be called like this:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * BSTIterator i = new BSTIterator(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * while (i.hasNext()) v[f()] = i.next();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Binary Search Tree Iterator
    
    </summary>
    
      <category term="algorithm" scheme="http://codeinterviews.com/categories/algorithm/"/>
    
    
      <category term="leetcode" scheme="http://codeinterviews.com/tags/leetcode/"/>
    
      <category term="Tree" scheme="http://codeinterviews.com/tags/Tree/"/>
    
      <category term="Stack" scheme="http://codeinterviews.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-Binary Tree Inorder Traversal</title>
    <link href="http://codeinterviews.com/Binary-Tree-Inorder-Traversal/"/>
    <id>http://codeinterviews.com/Binary-Tree-Inorder-Traversal/</id>
    <published>2016-06-30T03:57:53.000Z</published>
    <updated>2016-06-30T03:57:53.000Z</updated>
    
    <content type="html">&lt;p&gt;##题目&lt;/p&gt;
&lt;p&gt;####Binary Tree Inorder Traversal&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the inorder traversal of its nodes’ values.&lt;/p&gt;
&lt;p&gt;For example:&lt;br&gt;Given binary tree &lt;code&gt;{1,#,2,3}&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1
 \
  2
 /
3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;return &lt;code&gt;[1,3,2]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note: Recursive solution is trivial, could you do it iteratively?&lt;/p&gt;
&lt;p&gt;confused what &lt;code&gt;&amp;quot;{1,#,2,3}&amp;quot;&lt;/code&gt; means? &amp;gt; read more on how binary tree is serialized on OJ.&lt;/p&gt;
&lt;p&gt;####OJ’s Binary Tree Serialization:&lt;br&gt;The serialization of a binary tree follows a level order traversal, where ‘#’ signifies a path terminator where no node exists below.&lt;/p&gt;
&lt;p&gt;Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1
 / \
2   3
   /
  4
   \
    5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above binary tree is serialized as &lt;code&gt;&amp;quot;{1,2,3,#,#,4,#,#,5}&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##解题思路&lt;br&gt;该题是树的中序遍历，熟知的方法是一是用递归，二是使用栈实现的迭代方法。&lt;/p&gt;
&lt;p&gt;递归应该最常用的算法，相信大家都了解，算法的时间复杂度是O(n), 而空间复杂度则是递归栈的大小，即O(logn)。&lt;/p&gt;
&lt;p&gt;迭代的做法，其实就是用一个栈来模拟递归的过程。所以算法时间复杂度也是O(n)，空间复杂度是栈的大小O(logn)。过程中维护一个node表示当前走到的结点（不是中序遍历的那个结点）。&lt;/p&gt;
&lt;p&gt;当然，这里还有一个线索二叉树的方法：Morris Traversal。想用O(1)空间进行遍历，因为不能用栈作为辅助空间来保存付节点的信息，重点在于当访问到子节点的时候如何重新回到父节点（当然这里是指没有父节点指针，如果有其实就比较好办，一直找遍历的后驱结点即可）。&lt;br&gt;Morris遍历方法用了线索二叉树，这个方法不需要为每个节点额外分配指针指向其前驱和后继结点，而是利用叶子节点中的右空指针指向中序遍历下的后继节点就可以了。&lt;br&gt;算法具体分情况如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 如果当前结点的左孩子为空，则输出当前结点并将其当前节点赋值为右孩子。   
2. 如果当前节点的左孩子不为空，则寻找当前节点在中序遍历下的前驱节点（也就是当前结点左子树的最右孩子）。接下来分两种情况：   
 a) 如果前驱节点的右孩子为空，将它的右孩子设置为当前节点（做线索使得稍后可以重新返回父结点）。然后将当前节点更新为当前节点的左孩子。   
 b) 如果前驱节点的右孩子为当前节点，表明左子树已经访问完，可以访问当前节点。将它的右孩子重新设为空（恢复树的结构）。输出当前节点。当前节点更新为当前节点的右孩子。      
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##算法代码&lt;br&gt;代码采用JAVA实现：&lt;/p&gt;
&lt;p&gt;####递归代码&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Definition for binary tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * public class TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode(int x) &amp;#123; val = x; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt; &lt;span class=&quot;title&quot;&gt;inorderTraversal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ArrayList&amp;lt;Integer&amp;gt; res=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        helper(root,res);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root,ArrayList&amp;lt;Integer&amp;gt; res)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	helper(root.left,res);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	res.add(root.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	helper(root.right,res);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;####迭代代码&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Definition for binary tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * public class TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode(int x) &amp;#123; val = x; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt; &lt;span class=&quot;title&quot;&gt;inorderTraversal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    ArrayList&amp;lt;Integer&amp;gt; res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    LinkedList&amp;lt;TreeNode&amp;gt; stack = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;TreeNode&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(root!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || !stack.isEmpty())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            stack.push(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            root = root.left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            root = stack.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            res.add(root.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            root = root.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;####线索二叉树方法&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Definition for binary tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * public class TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode(int x) &amp;#123; val = x; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt; &lt;span class=&quot;title&quot;&gt;inorderTraversal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt; &lt;span class=&quot;title&quot;&gt;inorderTraversal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		    ArrayList&amp;lt;Integer&amp;gt; res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		    TreeNode cur = root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		    TreeNode pre = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(cur != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(cur.left == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		            res.add(cur.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		            cur = cur.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		            pre = cur.left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(pre.right!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; pre.right!=cur)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		                pre = pre.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pre.right==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		                pre.right = cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		                cur = cur.left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		                pre.right = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		                res.add(cur.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		                cur = cur.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Binary Tree Inorder Traversal
    
    </summary>
    
      <category term="algorithm" scheme="http://codeinterviews.com/categories/algorithm/"/>
    
    
      <category term="leetcode" scheme="http://codeinterviews.com/tags/leetcode/"/>
    
      <category term="Hash Table" scheme="http://codeinterviews.com/tags/Hash-Table/"/>
    
      <category term="Tree" scheme="http://codeinterviews.com/tags/Tree/"/>
    
      <category term="Stack" scheme="http://codeinterviews.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-Binary Tree Level Order Traversal II</title>
    <link href="http://codeinterviews.com/Binary-Tree-Level-Order-Traversal-II/"/>
    <id>http://codeinterviews.com/Binary-Tree-Level-Order-Traversal-II/</id>
    <published>2016-06-30T03:57:53.000Z</published>
    <updated>2016-06-30T03:57:53.000Z</updated>
    
    <content type="html">&lt;p&gt;##题目&lt;/p&gt;
&lt;p&gt;####Binary Tree Level Order Traversal II&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the bottom-up level order traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).&lt;/p&gt;
&lt;p&gt;For example:&lt;br&gt;Given binary tree &lt;code&gt;{3,9,20,#,#,15,7}&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  3
 / \
9  20
  /  \
 15   7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;return its bottom-up level order traversal as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
  [15,7],
  [9,20],
  [3]
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;confused what &lt;code&gt;&amp;quot;{1,#,2,3}&amp;quot;&lt;/code&gt; means? &amp;gt; read more on how binary tree is serialized on OJ.&lt;/p&gt;
&lt;p&gt;####OJ’s Binary Tree Serialization:&lt;br&gt;The serialization of a binary tree follows a level order traversal, where ‘#’ signifies a path terminator where no node exists below.&lt;/p&gt;
&lt;p&gt;Here’s an example: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1
 / \
2   3
   /
  4
   \
    5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above binary tree is serialized as &lt;code&gt;&amp;quot;{1,2,3,#,#,4,#,#,5}&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##解题思路&lt;br&gt;该题和&lt;a href=&quot;http://pisxw.com/algorithm/Binary-Tree-Level-Order-Traversal.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Binary Tree Level Order Traversal&lt;/a&gt;的解法相同，只不过在最后结果上是其结果的转置。&lt;/p&gt;
&lt;p&gt;这道题我没有想到什么好的做法可以一次的自底向上进行层序遍历，能想到的就是进行&lt;a href=&quot;http://pisxw.com/algorithm/Binary-Tree-Level-Order-Traversal.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Binary Tree Level Order Traversal&lt;/a&gt;中的遍历，然后对结果进行一次reverse.&lt;/p&gt;
&lt;p&gt;##算法代码&lt;br&gt;代码采用JAVA实现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Definition for binary tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * public class TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode(int x) &amp;#123; val = x; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; levelOrderBottom(TreeNode root) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; res=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;comment&quot;&gt;//使用队列来存储节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	LinkedList&amp;lt;TreeNode&amp;gt; queen=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;TreeNode&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;comment&quot;&gt;//使用队列来存储上述队列中节点的层数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	LinkedList&amp;lt;Integer&amp;gt; cequeen=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	queen.addLast(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	cequeen.addLast(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ce=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	ArrayList&amp;lt;Integer&amp;gt; cur=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!queen.isEmpty())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ce==cequeen.getFirst())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    			TreeNode no=queen.removeFirst();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    			&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cengshu=cequeen.removeFirst();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    			cur.add(no.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(no.left!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    				queen.addLast(no.left);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    				cequeen.addLast(cengshu+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(no.right!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    				queen.addLast(no.right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    				cequeen.addLast(cengshu+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    			res.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;(cur));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    			ce++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    			cur.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;comment&quot;&gt;//最后一次不要忘记加入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	res.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;(cur));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	Collections.reverse(res);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Binary Tree Level Order Traversal II
    
    </summary>
    
      <category term="algorithm" scheme="http://codeinterviews.com/categories/algorithm/"/>
    
    
      <category term="leetcode" scheme="http://codeinterviews.com/tags/leetcode/"/>
    
      <category term="Tree" scheme="http://codeinterviews.com/tags/Tree/"/>
    
      <category term="Breadth-first Search" scheme="http://codeinterviews.com/tags/Breadth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-Binary Tree Maximum Path Sum</title>
    <link href="http://codeinterviews.com/Binary-Tree-Maximum-Path-Sum/"/>
    <id>http://codeinterviews.com/Binary-Tree-Maximum-Path-Sum/</id>
    <published>2016-06-30T03:57:53.000Z</published>
    <updated>2016-06-30T03:57:53.000Z</updated>
    
    <content type="html">&lt;p&gt;##题目&lt;/p&gt;
&lt;p&gt;####Binary Tree Maximum Path Sum&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a binary tree, find the maximum path sum.&lt;/p&gt;
&lt;p&gt;The path may start and end at any node in the tree.&lt;/p&gt;
&lt;p&gt;For example:&lt;br&gt;Given the below binary tree,   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1
 / \
2   3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Return &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##解题思路&lt;br&gt;这道题是求树的路径和的题目，不过和平常不同的是这里的路径不仅可以从根到某一个结点，而且路径可以从左子树某一个结点，然后到达右子树的结点，就像题目中所说的可以起始和终结于任何结点。在这里树没有被看成有向图，而是被当成无向图来寻找路径。因为这个路径的灵活性，我们需要对递归返回值进行一些调整，而不是通常的返回要求的结果。在这里，函数的返回值定义为以自己为根的一条从根到子结点的最长路径（这里路径就不是当成无向图了，必须往单方向走）。这个返回值是为了提供给它的父结点计算自身的最长路径用，而结点自身的最长路径（也就是可以从左到右那种）则只需计算然后更新即可。这样一来，一个结点自身的最长路径就是它的左子树返回值（如果大于0的话），加上右子树的返回值（如果大于0的话），再加上自己的值。而返回值则是自己的值加上左子树返回值，右子树返回值或者0（注意这里是“或者”，而不是“加上”，因为返回值只取一支的路径和）。在过程中求得当前最长路径时比较一下是不是目前最长的，如果是则更新&lt;/p&gt;
&lt;p&gt;##算法代码&lt;br&gt;代码采用JAVA实现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Definition for binary tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * public class TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode(int x) &amp;#123; val = x; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxPathSum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//由于java是值传递，但是我们需要在递归中保存最大的路径长度，因此定义个ArryList便于修改,其中保存最大的长度。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ArrayList&amp;lt;Integer&amp;gt; res=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        res.add(Integer.MIN_VALUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        helper(root,res);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//这里需要一个返回值，返回以root节点为根的从root节点出发的最长路径长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root,ArrayList&amp;lt;Integer&amp;gt; res)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left=helper(root.left,res); &lt;span class=&quot;comment&quot;&gt;//返回左子树的最长路径长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; right=helper(root.right,res);&lt;span class=&quot;comment&quot;&gt;//返回右子树的最长路径长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cur=(left&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;?left:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)+(right&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;?right:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)+root.val; &lt;span class=&quot;comment&quot;&gt;//从左子树到右子树的路径长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(cur&amp;gt;res.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		res.set(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,cur);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; root.val+Math.max(Math.max(left,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;),Math.max(right,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Binary Tree Maximum Path Sum
    
    </summary>
    
      <category term="algorithm" scheme="http://codeinterviews.com/categories/algorithm/"/>
    
    
      <category term="leetcode" scheme="http://codeinterviews.com/tags/leetcode/"/>
    
      <category term="Depth-first Search" scheme="http://codeinterviews.com/tags/Depth-first-Search/"/>
    
      <category term="Tree" scheme="http://codeinterviews.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-Binary Tree Postorder Traversal</title>
    <link href="http://codeinterviews.com/Binary-Tree-Postorder-Traversal/"/>
    <id>http://codeinterviews.com/Binary-Tree-Postorder-Traversal/</id>
    <published>2016-06-30T03:57:53.000Z</published>
    <updated>2016-06-30T03:57:53.000Z</updated>
    
    <content type="html">&lt;p&gt;##题目&lt;/p&gt;
&lt;p&gt;####Binary Tree Postorder Traversal&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the postorder traversal of its nodes’ values.&lt;/p&gt;
&lt;p&gt;For example:&lt;br&gt;Given binary tree &lt;code&gt;{1,#,2,3}&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1
 \
  2
 /
3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;return &lt;code&gt;[3,2,1]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Recursive solution is trivial, could you do it iteratively?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##解题思路&lt;br&gt;该题是对二叉树进行后序遍历，如果使用递归求解非常简单，这里代码就不写了。&lt;/p&gt;
&lt;p&gt;题目中要求不要使用递归写法，因此可以使用&lt;strong&gt;栈&lt;/strong&gt;来将递归写法变成非递归写法。但是后序遍历的非递归算法还是比较复杂的。&lt;/p&gt;
&lt;p&gt;最下面在弹栈的时候需要分情况一下：&lt;br&gt;1）如果当前栈顶元素的右结点存在并且还没访问过（也就是右结点不等于上一个访问结点），那么就把当前结点移到右结点继续循环；&lt;br&gt;2）如果栈顶元素右结点是空或者已经访问过，那么说明栈顶元素的左右子树都访问完毕，应该访问自己继续回溯了。&lt;/p&gt;
&lt;p&gt;在下面代码中，都用相似的结构实现了前序，中序的遍历，以便于记忆。&lt;/p&gt;
&lt;p&gt;##算法代码&lt;br&gt;代码采用JAVA实现：&lt;/p&gt;
&lt;p&gt;先序遍历非递归：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//先序遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Definition for binary tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * public class TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode(int x) &amp;#123; val = x; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt; &lt;span class=&quot;title&quot;&gt;postpreorderTraversal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	ArrayList&amp;lt;Integer&amp;gt; res=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LinkedList&amp;lt;TreeNode&amp;gt; stack=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;TreeNode&amp;gt;();&lt;span class=&quot;comment&quot;&gt;//定义栈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(root!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || !stack.isEmpty())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		stack.push(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		res.add(root.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		root=root.left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		root=stack.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		root=root.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;中序遍历非递归：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//中序遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Definition for binary tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * public class TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode(int x) &amp;#123; val = x; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt; &lt;span class=&quot;title&quot;&gt;postinorderTraversal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	ArrayList&amp;lt;Integer&amp;gt; res=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LinkedList&amp;lt;TreeNode&amp;gt; stack=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;TreeNode&amp;gt;();&lt;span class=&quot;comment&quot;&gt;//定义栈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(root!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || !stack.isEmpty())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		stack.push(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		root=root.left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		root=stack.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		res.add(root.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		root=root.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;后序遍历非递归：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Definition for binary tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * public class TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode(int x) &amp;#123; val = x; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt; &lt;span class=&quot;title&quot;&gt;postorderTraversal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	ArrayList&amp;lt;Integer&amp;gt; res=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LinkedList&amp;lt;TreeNode&amp;gt; stack=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;TreeNode&amp;gt;();&lt;span class=&quot;comment&quot;&gt;//定义栈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TreeNode pre=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//记录前一个访问的节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(root!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || !stack.isEmpty())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//root表示当前节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		 stack.push(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		 root=root.left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		TreeNode peeknode=stack.peek();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(peeknode.right!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; peeknode.right!=pre)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        			root=peeknode.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        			stack.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        			res.add(peeknode.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        			pre=peeknode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Binary Tree Postorder Traversal
    
    </summary>
    
      <category term="algorithm" scheme="http://codeinterviews.com/categories/algorithm/"/>
    
    
      <category term="leetcode" scheme="http://codeinterviews.com/tags/leetcode/"/>
    
      <category term="Tree" scheme="http://codeinterviews.com/tags/Tree/"/>
    
      <category term="Stack" scheme="http://codeinterviews.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-Binary Tree Level Order Traversal</title>
    <link href="http://codeinterviews.com/Binary-Tree-Level-Order-Traversal/"/>
    <id>http://codeinterviews.com/Binary-Tree-Level-Order-Traversal/</id>
    <published>2016-06-30T03:57:53.000Z</published>
    <updated>2016-06-30T03:57:53.000Z</updated>
    
    <content type="html">&lt;p&gt;##题目&lt;/p&gt;
&lt;p&gt;####Binary Tree Level Order Traversal&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).&lt;/p&gt;
&lt;p&gt;For example:&lt;br&gt;Given binary tree &lt;code&gt;{3,9,20,#,#,15,7}&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  3
 / \
9  20
  /  \
 15   7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;return its level order traversal as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
  [3],
  [9,20],
  [15,7]
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;confused what &lt;code&gt;&amp;quot;{1,#,2,3}&amp;quot;&lt;/code&gt; means? &amp;gt; read more on how binary tree is serialized on OJ.&lt;/p&gt;
&lt;p&gt;####OJ’s Binary Tree Serialization:&lt;br&gt;The serialization of a binary tree follows a level order traversal, where ‘#’ signifies a path terminator where no node exists below.&lt;/p&gt;
&lt;p&gt;Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1
 / \
2   3
   /
  4
   \
    5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above binary tree is serialized as &lt;code&gt;&amp;quot;{1,2,3,#,#,4,#,#,5}&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##解题思路&lt;br&gt;该题是对二叉树进行层次优先遍历，层次遍历主要采用队列的形式进行存储，通过将每个节点的左孩子和右孩子放入队列中，然后每次从队列中取出元素即可。在java中使用LinkedList来实现队列操作，其中主要方法为：入队：addLast(),出队：revomeFirst(),获取第一个元素：getFirst(),判断队列是否为空：isEmpty();&lt;/p&gt;
&lt;p&gt;##算法代码&lt;br&gt;代码采用JAVA实现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Definition for binary tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * public class TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode(int x) &amp;#123; val = x; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; levelOrder(TreeNode root) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; res=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//该队列中放入节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LinkedList&amp;lt;TreeNode&amp;gt; queen=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;TreeNode&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//该队列中放入queen中对应节点的层次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LinkedList&amp;lt;Integer&amp;gt; cequeen=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        queen.addLast(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cequeen.addLast(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cengshu=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ArrayList&amp;lt;Integer&amp;gt; cur=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!queen.isEmpty())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ce=cequeen.getFirst();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ce==cengshu)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		TreeNode no=queen.removeFirst();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; noce=cequeen.removeFirst();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		cur.add(no.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(no.left!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        			queen.addLast(no.left);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        			cequeen.addLast(noce+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		&amp;#125; 			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(no.right!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        			queen.addLast(no.right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        			cequeen.addLast(noce+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		&amp;#125;       			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		res.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;(cur));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		cur.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		cengshu++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        res.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;(cur));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Binary Tree Level Order Traversal
    
    </summary>
    
      <category term="algorithm" scheme="http://codeinterviews.com/categories/algorithm/"/>
    
    
      <category term="leetcode" scheme="http://codeinterviews.com/tags/leetcode/"/>
    
      <category term="Tree" scheme="http://codeinterviews.com/tags/Tree/"/>
    
      <category term="Breadth-first Search" scheme="http://codeinterviews.com/tags/Breadth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-Binary Tree Zigzag Level Order Traversal</title>
    <link href="http://codeinterviews.com/Binary-Tree-Zigzag-Level-Order-Traversal/"/>
    <id>http://codeinterviews.com/Binary-Tree-Zigzag-Level-Order-Traversal/</id>
    <published>2016-06-30T03:57:53.000Z</published>
    <updated>2016-06-30T03:57:53.000Z</updated>
    
    <content type="html">&lt;p&gt;##题目&lt;/p&gt;
&lt;p&gt;####Binary Tree Zigzag Level Order Traversal&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).&lt;/p&gt;
&lt;p&gt;For example:&lt;br&gt;Given binary tree &lt;code&gt;{3,9,20,#,#,15,7}&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  3
 / \
9  20
  /  \
 15   7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;return its zigzag level order traversal as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
  [3],
  [20,9],
  [15,7]
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;confused what &lt;code&gt;&amp;quot;{1,#,2,3}&amp;quot;&lt;/code&gt; means? &amp;gt; read more on how binary tree is serialized on OJ.&lt;/p&gt;
&lt;p&gt;####OJ’s Binary Tree Serialization:&lt;br&gt;The serialization of a binary tree follows a level order traversal, where ‘#’ signifies a path terminator where no node exists below.&lt;/p&gt;
&lt;p&gt;Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1
 / \
2   3
   /
  4
   \
    5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above binary tree is serialized as &lt;code&gt;&amp;quot;{1,2,3,#,#,4,#,#,5}&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##解题思路&lt;br&gt;该题其实还是对树的层次遍历，只不过有一点区别：在奇数层上是从左往右遍历，而在偶数层上是从右往左遍历，因此由于顺序是相反的，我们很容易想到的是用栈来存储每一层的节点。因此这里选用两个栈，一个栈用于读取节点，一个栈用于保存每一层的节点。&lt;/p&gt;
&lt;p&gt;##算法代码&lt;br&gt;代码采用JAVA实现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Definition for binary tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * public class TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode(int x) &amp;#123; val = x; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; zigzagLevelOrder(TreeNode root) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    LinkedList&amp;lt;TreeNode&amp;gt; stack = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;TreeNode&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; level=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    ArrayList&amp;lt;Integer&amp;gt; item = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    item.add(root.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    res.add(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    stack.push(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!stack.isEmpty())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        LinkedList&amp;lt;TreeNode&amp;gt; newStack = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;TreeNode&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        item = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!stack.isEmpty())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            TreeNode node = stack.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(level%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(node.left!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                    newStack.push(node.left);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                    item.add(node.left.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(node.right!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                    newStack.push(node.right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                    item.add(node.right.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(node.right!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                    newStack.push(node.right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                    item.add(node.right.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(node.left!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                    newStack.push(node.left);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                    item.add(node.left.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                &amp;#125;                   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        level++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(item.size()&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            res.add(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        stack = newStack;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Binary Tree Zigzag Level Order Traversal
    
    </summary>
    
      <category term="algorithm" scheme="http://codeinterviews.com/categories/algorithm/"/>
    
    
      <category term="leetcode" scheme="http://codeinterviews.com/tags/leetcode/"/>
    
      <category term="Tree" scheme="http://codeinterviews.com/tags/Tree/"/>
    
      <category term="Stack" scheme="http://codeinterviews.com/tags/Stack/"/>
    
      <category term="Breadth-first Search" scheme="http://codeinterviews.com/tags/Breadth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-Binary Tree Preorder Traversal</title>
    <link href="http://codeinterviews.com/Binary-Tree-Preorder-Traversal/"/>
    <id>http://codeinterviews.com/Binary-Tree-Preorder-Traversal/</id>
    <published>2016-06-30T03:57:53.000Z</published>
    <updated>2016-06-30T03:57:53.000Z</updated>
    
    <content type="html">&lt;p&gt;##题目&lt;/p&gt;
&lt;p&gt;####Binary Tree Preorder Traversal&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the preorder traversal of its nodes’ values.&lt;/p&gt;
&lt;p&gt;For example:&lt;br&gt;Given binary tree {1,#,2,3},&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1
 \
  2
 /
3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;return [1,2,3].&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Recursive solution is trivial, could you do it iteratively?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##解题思路&lt;br&gt;该题是对二叉树进行先序遍历，如果使用递归求解非常简单，这里代码就不写了。&lt;/p&gt;
&lt;p&gt;题目中要求不要使用递归写法，因此可以使用&lt;strong&gt;栈&lt;/strong&gt;来将递归写法变成非递归写法。这里需要注意的是先要压入右节点，然后在压入左节点，这样首先访问的就是左节点了哈。&lt;/p&gt;
&lt;p&gt;##算法代码&lt;br&gt;代码采用JAVA实现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Definition for binary tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * public class TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     TreeNode(int x) &amp;#123; val = x; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt; &lt;span class=&quot;title&quot;&gt;preorderTraversal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ArrayList&amp;lt;Integer&amp;gt; res=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//定义一个栈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LinkedList&amp;lt;TreeNode&amp;gt; stack=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;TreeNode&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stack.push(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!stack.isEmpty())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	TreeNode node=stack.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	res.add(node.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(node.right!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		stack.push(node.right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(node.left!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		stack.push(node.left);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Binary Tree Preorder Traversal
    
    </summary>
    
      <category term="algorithm" scheme="http://codeinterviews.com/categories/algorithm/"/>
    
    
      <category term="leetcode" scheme="http://codeinterviews.com/tags/leetcode/"/>
    
      <category term="Tree" scheme="http://codeinterviews.com/tags/Tree/"/>
    
      <category term="Stack" scheme="http://codeinterviews.com/tags/Stack/"/>
    
  </entry>
  
</feed>
